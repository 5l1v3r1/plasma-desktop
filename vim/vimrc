" --------------------------------------------------------------------------------------------------------------------------------------------------
"
"    __      ___   _ ___  ___ _ __ ___   __ _ _ __
"    \ \ /\ / / | | / __|/ _ \ '_ ` _ \ / _` | '_ \
"     \ V  V /| |_| \__ \  __/ | | | | | (_| | | | |
"      \_/ \_/  \__,_|___/\___|_| |_| |_|\__,_|_| |_|
"
"       Author: wuseman <wuseman@nr1.nu>
"    
"       FileName: vimrc
"       Modified: 2022-09-23 (11:02:02)
"
"       Description: my personal configuration file for vim: 
"       License: Copyright (c) 2022, wuseman
"
" - End Of Header-----------------------------------------------------------------------------------------------------------------------------------
" Leader
let mapleader = ","
let g:mapleader = ","

colorscheme w2
" Save via CRL+s
nnoremap <silent><c-s> :<c-u>update<cr>

" so == so[urce]
nnoremap ss :so $MYVIMRC<CR>
nnoremap so :so $MYVIMRC<CR>


" Quick Save
nnoremap qq :q!<CR>
nnoremap Q :q!<CR>

" Saves the file (handling the permission-denied error)
nnoremap w!! w !sudo tee % >/dev/null

" Make a new vertical horizental via ,s
nnoremap <leader>s <c-w>s<c-w>j

" Make a new vertical horizintal via ,s
nnoremap <leader>h <c-w>s<c-w>j

" Make a vertical split via ,v
nnoremap <leader>v <c-w>v<c-w>l

" Close a split via ,c
nnoremap <leader>x <c-w>c   
" Replace all matches
nnoremap RA :%s///g<left><left>

" Replace the current search                                                                                              
nnoremap RO :s///g<left><left>                                                                                                      

" Replace a word, empty inputs
nnoremap <expr> <leader>rr ':<c-u>%s///g<left><left>'    

" Select a word and also mapping for replace all words
nnoremap <leader>rs :%s/\<<C-r><C-w>\>//g<Left><Left>                                           " Unsure 
nnoremap <expr> <leader>rw ':<c-u>%s/\<' . expand('<cword>') . '\>//g<left><left>'              " rw = replace word = if cursor is on "bin" then it will replace all bin with anything you want
nnoremap <expr> <leader>rr ':<c-u>%s///g<left><left>'                                           " Replace a word, empty inputs
nnoremap <expr> <leader>ri ':<c-u>:14,20s/^/#/'                                                 " Comment out line 14 til 20, edit it after your needs in action

" For set paste method
set clipboard=unnamed                                                                                                               

" Use ,P for copy to linux clipboard, this require vim-gtk3
map <leader>P "+y                                                                                                                   

" ################################################################################################################
" #
" # - Paths we use for storing vim files
" #
" ################################################################################################################
" set backupdir=~/.vim/backup/
" set directory=~/.vim/swaps


" ################################################################################################################
" # 
" # - Misc
" #
" ################################################################################################################

" This is cool (https://kb.iu.edu/d/afcw)
set nocompatible
set noshowmode
set noruler
set laststatus=0
set noshowcmd
set autoindent 
set smartindent
set number
set cryptmethod=blowfish2 
set gdefault
set hlsearch 
set ignorecase
set incsearch 
"set magic 
"set mouse=  
set mousehide
set showcmd  
set showmode 
set noswapfile
set ttyfast

autocmd BufRead,BufWritePre *.sh normal gg=G


" ################################################################################################################
" # 
" # - Bind keys
" #
" ################################################################################################################

" This is freaking awesome, below will undent a single line multiple times
" so from now we can hit '>' or '<' and tab multiple lines at same time
vnoremap < <gv
vnoremap > >gv


" nnoremap <Left>  :echoe "Use h"<CR>
" nnoremap <Right> :echoe "Use l"<CR>
" nnoremap <Up>    :echoe "Use k"<CR>
" nnoremap <Down>  :echoe "Use j"<CR>

" Use map leader and c for add comments
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>

" Use map leader and cu for uncomment
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>


" Delete current line without yanking the line breaks 
nnoremap dil d$

" Replace all matches
nnoremap RA :%s///g<left><left>

" Replace the current search                                                                                              
nnoremap RO :s///g<left><left>                                                                                                      

" Replace a word, empty inputs
nnoremap <expr> <leader>rr ':<c-u>%s///g<left><left>'                                           

" Quickly quit editting withoutu 
nnoremap ww :w!<CR>                                                                                                                 
                                                                                                                
" For set paste method
set clipboard=unnamed                                                                                                               

" Use ,P for copy to linux clipboard, this require vim-gtk3
map <leader>P "+y                                                                                                                   


" ################################################################################################################
" # 
" # - Insert functions
" #
" ################################################################################################################

" Insert cmd for mkdocs
nnoremap <leader>b o###<CR><CR>```bash<CR><CR>```<CR><esc>6k

" Insert function
nnoremap <leader>bf i<ESC>o<ESC>ofunction editme() {<ESC>o<ESC>o}<ESC>ki<S-TAB> 

" Insert geotestplos                                                      
nnoremap <leader>bg :r /home/wuseman/.vim/bash-templates/getopts.sh<CR>        

" Insert usage                                                      
nnoremap <leader>bu :r /home/wuseman/.vim/bash-templates/usage.sh<CR>           

" Insert Settings                                                    
nnoremap <leader>bs :r /home/wuseman/.vim/bash-templates/settings.sh<CR>           

" insert IF"                                                 
nnoremap <leader>bi :r /home/wuseman/.vim/bash-templates/if.sh<CR>                                                                 

" ################################################################################################################
" #
" # - Headers
" #
" ################################################################################################################

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Headers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vimrc configuration (vimrc)
autocmd BufLeave,filewritepre vimrc exe "1," . 11 . "g/Modified:.*/s/Modified:.*/Modified: " .strftime("%Y-%m-%d (%H:%M:%S)")
autocmd BufLeave,filewritepre *vimrc exe "1," . 11 . "g/Modified:.*/s/Modified:.*/Modified: " .strftime("%Y-%m-%d (%H:%M:%S)")

" Configuration files (.conf)
au BufNewFile *.conf 0r ~/.vim/headers/config_headers.txt
autocmd bufnewfile *.conf exe "1," . 4 . "g/FileName:.*/s//FileName: " .expand("%")
autocmd bufnewfile *.conf exe "1," . 6 . "g/Created:.*/s//Created: " .strftime("%Y-%m-%d (%H:%M:%S)")
autocmd Bufwritepre,filewritepre *.conf exe "1," . 7 . "g/Modified:.*/s/Modified:.*/Modified: " .strftime("%Y-%m-%d (%H:%M:%S)")

" shell configuration (sh)
au BufNewFile *.sh 0r ~/.vim/headers/bash_header.sh
autocmd bufnewfile *.sh exe "1," . 6 . "g/FileName:.*/s//FileName: " .expand("%")
autocmd bufnewfile *.sh exe "1," . 9 . "g/Created:.*/s//Created: " .strftime("%Y-%m-%d (%H:%M:%S)")



" markdown configuration (md)
au BufNewFile *.md 0r ~/.vim/headers/markdown_headers.md
autocmd bufnewfile *.md exe "1," . 2 . "g/title: .*/s//title: " .expand("%")
autocmd bufnewfile *.md exe "1," . 9 . "g/created:.*/s//created: " .strftime("%Y-%m-%d (%H:%M:%S)")
autocmd bufnewfile *.md exe "1," . 9 . "g/date:.*/s//date: " .strftime("%A %d, %Y - %H:%M:%S")
autocmd bufnewfile *.md exe "1," . 9 . "g/authors:.*/s//authors: " .strftime("wuseman, wuseman@nr1.nu")


" Configuration files (.vimrc)
autocmd bufnewfile *.vimrc exe "1," . 4 . "g/FileName:.*/s//FileName: " .expand("%")
autocmd bufnewfile *.vimrc exe "1," . 6 . "g/Created:.*/s//Created: " .strftime("%Y-%m-%d (%H:%M:%S)")

" ################################################################################################################
" #
" # EDIT HEADER WITHOUT JUMPING, modified
" #
" ################################################################################################################
autocmd BufWritePre,FileWritePre *.*   ks|call Modified()|'s
fun Modified()
  if line("$") > 20
    let l = 20
  else
    let l = line("$")
  endif
  exe "1," . l . "g/Modified: /s/Modified: .*/Modified: " .
 \ strftime("%Y-%m-%d (%H:%M:%S)")
endfun

autocmd BufWritePre,FileWritePre *.*   ks|call License()|'s
fun License()
  if line("$") > 20
    let l = 20
  else
    let l = line("$")
  endif
  exe "1," . l . "g/License:.*/s/License:.*/License: " .
 \ strftime("Copyright (c) %Y, wuseman")
endfun






" ################################################################################################################
" # 
" # - Shebangs
" #
" ################################################################################################################
augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: iso-8859-15 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># -*- coding: None -*-\<nl>\"|$
  autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END
                         

" ################################################################################################################
" # 
" # - Set editor / viewer and colors gnu manuals in vim
" #
" ################################################################################################################
syn match manSectionHeading "^\s\+[0-9]\+\.[0-9.]*\s\+[A-Z].*$" contains=manSectionNumber
syn match manSectionNumber "^\s\+[0-9]\+\.[0-9]*" contained
syn region manDQString start='[^a-zA-Z"]"[^", )]'lc=1 end='"' contains=manSQString
syn region manSQString start="[ \t]'[^', )]"lc=1 end="'"
syn region manSQString start="^'[^', )]"lc=1 end="'"
syn region manBQString start="[^a-zA-Z`]`[^`, )]"lc=1 end="[`']"
syn region manBQSQString start="``[^),']" end="''"
syn match manBulletZone transparent "^\s\+o\s" contains=manBullet
syn case match
syn keyword manBullet contained o
syn match manBullet contained "\[+*]"
syn match manSubSectionStart "^\*" skipwhite nextgroup=manSubSection
syn match manSubSection ".*$" contained

hi link manSectionNumber Number
hi link manDQString String
hi link manSQString String
hi link manBQString String
hi link manBQSQString String
hi link manBullet Special
hi manSubSectionStart term=NONE cterm=NONE gui=NONE ctermfg=black ctermbg=black guifg=navyblue guibg=navyblue
hi manSubSection term=underline cterm=underline gui=underline ctermfg=green guifg=green


" ################################################################################################################
" #
" # - Some productivity tips by wuseman for commenting several lines at once
" #
" # - Description
" # -    
" #        The default way:
" #
" #         - For comment several lines at once, do as following
" #         - Enter visual mode and select lines: ctrl+v
" #         - Press Shft+I (capital i) and you will enter insert mode, choose #
" #         - It will insert a # at first line, now the magic - Pres esc for add the hash to marked lines
" #
" #
" #       The awesome way
" #
" #         Below augroup will add comments by file extension and language
" #         Use ctrl-v to select multiple lines, see below
" #
" #          - Use map leader and c for add comments
" #          - Use map leader and cu for uncomment
" #
" #
" ################################################################################################################
augroup commenting_blocks_of_code
  autocmd!
  autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
  autocmd FileType sh,ruby,python   let b:comment_leader = '# '
  autocmd FileType conf,fstab       let b:comment_leader = '# '
  autocmd FileType tex              let b:comment_leader = '% '
  autocmd FileType mail             let b:comment_leader = '> '
  autocmd FileType vim              let b:comment_leader = '" '
augroup END
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>





" Sections:
"    -> Headers
"    -> Headers BInd
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Headers BInd
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Insert a Function 
nnoremap <leader>if i<ESC>o<ESC>ofunction editme() {<ESC>o<ESC>o}<ESC>ki<S-TAB>                                                   

" Insert getopts example  
nnoremap <leader>ig :r /home/wuseman/.vim/bash-templates/getopts.sh<CR>                                                            

" Insert getopts exampleS
nnoremap <leader>ih :r /home/wuseman/.vim/bash-templates/show_help.sh<CR>                                                          

" Insert getopts exampleS
nnoremap <leader>is :r /home/wuseman/.vim/bash-templates/settings.sh<CR>                                                          

" Insert getopts exampleS
nnoremap <leader>ii :r /home/wuseman/.vim/bash-templates/if.sh<CR>                                                                 

 " Insert getopts exampleS
nnoremap <leader>igl :r /home/wuseman/.vim/bash-templates/getopts-long.sh<CR>               

" Insert ok and err msg
nnoremap <leader>io :r /home/wuseman/.vim/bash-templates/ok_and_err.sh<CR>                                                         

" Insert author msg

nnoremap <leader>ia :r /home/wuseman/.vim/bash-templates/author.sh<CR>                                                       


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Format the status line
set statusline=%F%m%r%h%w%=\ [%Y]\ [%{&ff}]\ [%04l,%04v]\ [%p%%]\ [%L]\ [Percent:\ %p%%]\ [col:\ %c\]

" set statusline=\ %{HasPaste()}%F%m%r%h%w\ \ CWD:\ %{getcwd()}%h%=\ \ \ [%Y]\ [%{&ff}]\ [%04l,%04v]\ [%p%%]\ [%L]\ [Percent:\ %p%%]\ [col:\ %c\]

" Show tabs above vim
set showtabline=4              

" Sets the number of columns for a TAB                                                                                             
set softtabstop=4                                                                                                         

" The width of a TAB is set to 4.  
set tabstop=4                                                                                                              

" Open new files in a new statusline
au BufAdd,BufNewFile * nested tab sball                                                                          

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif





set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


Plugin 'VundleVim/Vundle.vim'
Plugin 'wakatime/vim-wakatime'

call vundle#end()            " required
filetype plugin indent on    " required

" ################################################################################################################
" #
" # - Some productivity tips by wuseman for commenting several lines at once
" #
" # - Description
" # -    
" #        The default way:
" #
" #         - For comment several lines at once, do as following
" #         - Enter visual mode and select lines: ctrl+v
" #         - Press Shft+I (capital i) and you will enter insert mode, choose #
" #         - It will insert a # at first line, now the magic - Pres esc for add the hash to marked lines
" #
" #
" #       The awesome way
" #
" #         Below augroup will add comments by file extension and language
" #         Use ctrl-v to select multiple lines, see below
" #
" #          - Use map leader and c for add comments
" #          - Use map leader and cu for uncomment
" #
" #
" ################################################################################################################
augroup commenting_blocks_of_code
  autocmd!
  autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
  autocmd FileType sh,ruby,python   let b:comment_leader = '# '
  autocmd FileType conf,fstab       let b:comment_leader = '# '
  autocmd FileType tex              let b:comment_leader = '% '
  autocmd FileType mail             let b:comment_leader = '> '
  autocmd FileType vim              let b:comment_leader = '" '
augroup END

" ----------------------------------------------------------------------------------
" - List warez NFO extensions properly
" ----------------------------------------------------------------------------------
function! SetFileEncodings(encodings)
  let b:myfileencodingsbak=&fileencodings
  let &fileencodings=a:encodings
endfunction

function! RestoreFileEncodings()
  let &fileencodings=b:myfileencodingsbak
  unlet b:myfileencodingsbak
endfunction
                    


" ----------------------------------------------------------------------------------
" For mutt
" Vim syntax file for the mutt sidebar patch
" ----------------------------------------------------------------------------------
syntax keyword muttrcVarBool    skipwhite contained sidebar_folder_indent nextgroup=muttrcSetBoolAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr
syntax keyword muttrcVarBool    skipwhite contained sidebar_new_mail_only nextgroup=muttrcSetBoolAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr
syntax keyword muttrcVarBool    skipwhite contained sidebar_next_new_wrap nextgroup=muttrcSetBoolAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr
syntax keyword muttrcVarBool    skipwhite contained sidebar_short_path    nextgroup=muttrcSetBoolAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr
syntax keyword muttrcVarBool    skipwhite contained sidebar_visible       nextgroup=muttrcSetBoolAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr

syntax keyword muttrcVarNum     skipwhite contained sidebar_refresh_time  nextgroup=muttrcSetNumAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr
syntax keyword muttrcVarNum     skipwhite contained sidebar_width         nextgroup=muttrcSetNumAssignment,muttrcVPrefix,muttrcVarBool,muttrcVarQuad,muttrcVarNum,muttrcVarStr

syntax keyword muttrcVarStr     contained skipwhite sidebar_divider_char  nextgroup=muttrcVarEqualsIdxFmt
syntax keyword muttrcVarStr     contained skipwhite sidebar_delim_chars   nextgroup=muttrcVarEqualsIdxFmt
syntax keyword muttrcVarStr     contained skipwhite sidebar_format        nextgroup=muttrcVarEqualsIdxFmt
syntax keyword muttrcVarStr     contained skipwhite sidebar_indent_string nextgroup=muttrcVarEqualsIdxFmt
syntax keyword muttrcVarStr     contained skipwhite sidebar_sort_method   nextgroup=muttrcVarEqualsIdxFmt

syntax keyword muttrcCommand    sidebar_whitelist

syntax match muttrcFunction     contained "\<sidebar-next\>"
syntax match muttrcFunction     contained "\<sidebar-next-new\>"
syntax match muttrcFunction     contained "\<sidebar-open\>"
syntax match muttrcFunction     contained "\<sidebar-page-down\>"
syntax match muttrcFunction     contained "\<sidebar-page-up\>"
syntax match muttrcFunction     contained "\<sidebar-prev\>"
syntax match muttrcFunction     contained "\<sidebar-prev-new\>"
syntax match muttrcFunction     contained "\<sidebar-toggle-visible\>"

syntax keyword muttrcColorField contained sidebar_divider
syntax keyword muttrcColorField contained sidebar_flagged
syntax keyword muttrcColorField contained sidebar_highlight
syntax keyword muttrcColorField contained sidebar_indicator
syntax keyword muttrcColorField contained sidebar_new



" - Move betwene tabs
" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>

highlight StatusLine ctermfg=7 ctermbg=236
highlight StatusLineNC ctermfg=7 ctermbg=236

" Vim8 Specific
highlight StatusLineTerm ctermfg=7 ctermbg=236
highlight StatusLineTermNC ctermfg=7 ctermbg=236
autocmd FileType * set formatoptions-=cro
augroup monitor_python_change
    au!
    au QuitPre *.py call s:update_timestamp('now', 'on_QuitPre')
    au BufWritePre,FileWritePre *.py call s:update_timestamp('later', 'on_BufLeave')
augroup END

fu! s:update_timestamp(when, on_what) abort
    if a:when is# 'now'
        sil! au! update_timestamp
        sil! aug! update_timestamp
        if a:on_what is# 'on_QuitPre' && !&l:modified
            return
        endif
        sil! 1/Modified: \zs.*/s//\=strftime('%Y-%m-%d %H:%M:%S %z(%Z)')/
    else
        augroup update_timestamp
            au!
            au BufLeave * call s:update_timestamp('now', 'on_BufLeave')
        augroup END
    endif
endfu






call vundle#begin()
  Plugin 'wakatime/vim-wakatime'
  Plugin 'preservim/nerdtree'
call vundle#end()









